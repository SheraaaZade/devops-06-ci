6ème séance
git init
suivre etape sur github
git checkout -b /feat/project-init

npm init et suivre les étapes nom, description ...

installer Commitizen locally pour les msg commit structuré
npm install --save-dev commitizen

rappel package.json : 
des dépendances dev (utilisés pour le developpement et non pour la production) et les dépendances (utilisés pour la prod càd le code final)

npx commitizen init cz-conventional-changelog --save-dev --save-exact

ajouter dans package.json dans scripts nouvelle commande : "commit":"cz"

git add .
npm run commit

creer dossier public dedans index.html
creer dossier src dedans app.js et faire le lien entre html et javascript

installer webpack : npm install --save-dev webpack webpack-cli
mettre dans package.json dans scripts : "build": "webpack ./src/app.js -o public/"
explication de la commande : elle va builder mon app.js, dans le dossier public et par défaut le fichier va être main.js

il faut l'executer mtn : npm run build
on remarque un nouveau fichier main.js dans public , webpack a juste de creer un code optimisé pour la production. C'est le meme code écrit mais écris en pure javascript.
On a tout setupé mtn on fait git add . et npm run commit
git push --set-upstream origin feat/project-init
comme on est en stratégie features il faut faire une merge request
et accepter ce merge , et dans VSC aller dans branch main et faire git pull

Good practices (prettier, eslint)
-----------------------------------

git checkout -b feat/setup-good-practices
npm install --save-dev --save-exact prettier

dans script :  
"prettier":"prettier -c \"src/**/*.js\"",
    "prettier:fix":"prettier -w \"src/**/*.js\""

npm run prettier:fix

npm init @eslint/config

dans fichier .eslintrc.js
 il y a >>> "extends": "eslint:recommended",
 mais pour faire cohabiter prettier et eslint il faut changer ce paramètre et mettre:
 'extends':['prettier'], << va générer une erreur
 alors :  npm install --save-dev --save-exact eslint-config-prettier
 dans package json : "code:fix":"npm run prettier:fix && npm run lint:fix"

git checkout -b feat/setup-jest
 npm install --save-dev jest

ajouter dossier __test__ dans src et un fichier app.test.js dans dossier test
dans package.json remplacé ça :  "test": "echo \"Error: no test specified\" && exit 1",
par "test": "jest",
puis npm test

ajouter également: 
"test:coverage":"jest --coverage",
"test:watch":"jest --watchAll",

npm run test:coverage >> va générer un dossier coverage QU'IL FAUDRA METTRE DANS LE GITIGNORE!!! (il y a un même un fichier index.html qu'on peut consulter au lieu du terminal)

npm run code:fix
git add . etc...

git checkout -b feat/tdd-example
on lance le watch comme ça sa execute instantanément si OK alors on commit
npm run test:watch

à chaque ajout de test (describe) on fait npm run code:fix et on commit avec msg test
et si il y a moyen de refactor alors on le fait et on commit avec msg refactor
et enfin git push


DEVOPS
--------

créer dossier .github/workflows/ci.yml dans devops-06-ci

mettre dans ce fichier ci.yml : 

name: DevOps06 CI #nom du workflow
on: # le moment qu'on veut que ça s'active
  pull_request:
    branches: [ main ]

jobs: 
  check_code:
    runs-on: ubuntu-latest #machine virtuelle(qui utilise le moins de ressources) qu'on veut utiliser pour lancer toutes
    #les étapes définies ici: 
    steps:
      - uses: actions/checkout@v2 #des actions déjà définies comme celle ci
      - uses: actions/setup-node@v1
        with:
          node-version: 16.14
      - run: npm ci # des commandes executer sur le serveur
      - run: npm run lint
      - run: npm run prettier
      - run: npm test
      - run: npm run build

git add . etc...

git checkout -b feat/ci-test

faire des commit > push > pull request et checker si le yml est passé si OK alors on merge sinon on corrige